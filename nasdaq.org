
- request for realtime trades:

#+begin_example
curl 'https://api.nasdaq.com/api/quote/LITE/realtime-trades?&limit=20&fromTime=00:00' \
  -H 'authority: api.nasdaq.com' \
  -H 'accept: application/json, text/plain, */*' \
  -H 'user-agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Mobile Safari/537.36' \
  -H 'origin: https://www.nasdaq.com' \
  -H 'sec-fetch-site: same-site' \
  -H 'sec-fetch-mode: cors' \
  -H 'sec-fetch-dest: empty' \
  -H 'referer: https://www.nasdaq.com/market-activity/stocks/lite/latest-real-time-trades' \
  -H 'accept-language: en-US,en;q=0.9' \
  --compressed
#+end_example

- python requests, converted with https://curl.trillworks.com/

#+begin_example
import requests

headers = {
    'authority': 'api.nasdaq.com',
    'accept': 'application/json, text/plain, */*',
    'user-agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Mobile Safari/537.36',
    'origin': 'https://www.nasdaq.com',
    'sec-fetch-site': 'same-site',
    'sec-fetch-mode': 'cors',
    'sec-fetch-dest': 'empty',
    'referer': 'https://www.nasdaq.com/market-activity/stocks/lite/latest-real-time-trades',
    'accept-language': 'en-US,en;q=0.9',
}

params = (
    ('', ''),
    ('limit', '20'),
    ('fromTime', '00:00'),
)

response = requests.get('https://api.nasdaq.com/api/quote/LITE/realtime-trades, headers=headers, params=params)

#NB. Original query string below. It seems impossible to parse and
#reproduce query strings 100% accurately so the one below is given
#in case the reproduced version is not "correct".
# response = requests.get('https://api.nasdaq.com/api/quote/LITE/realtime-trades?&limit=20&fromTime=00:00', headers=headers)

#+end_example

- request as fetch
#+begin_example
fetch("https://api.nasdaq.com/api/quote/LITE/realtime-trades?&limit=20&fromTime=00:00", {
  "headers": {
    "accept": "application/json, text/plain, */*",
    "accept-language": "en-US,en;q=0.9",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site"
  },
  "referrer": "https://www.nasdaq.com/market-activity/stocks/lite/latest-real-time-trades",
  "referrerPolicy": "no-referrer-when-downgrade",
  "body": null,
  "method": "GET",
  "mode": "cors",
  "credentials": "omit"
});
#+end_example

- request as node.js fetch
#+begin_example
fetch("https://api.nasdaq.com/api/quote/LITE/realtime-trades?&limit=20&fromTime=00:00", {
  "headers": {
    "accept": "application/json, text/plain, */*",
    "accept-language": "en-US,en;q=0.9",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site"
  },
  "referrer": "https://www.nasdaq.com/market-activity/stocks/lite/latest-real-time-trades",
  "referrerPolicy": "no-referrer-when-downgrade",
  "body": null,
  "method": "GET",
  "mode": "cors"
});
#+end_example

- response:

#+begin_example
{
   "data":{
      "symbol":"lite",
      "totalRecords":100,
      "offset":0,
      "limit":20,
      "headers":{
         "nlsTime":"NLS Time (ET)",
         "nlsPrice":"NLS Price",
         "nlsShareVolume":"NLS Share Volume"
      },
      "rows":[
         {
            "nlsTime":"09:54:48",
            "nlsPrice":"$ 81.47",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:48",
            "nlsPrice":"$ 81.48",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:15",
            "nlsPrice":"$ 81.6",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:06",
            "nlsPrice":"$ 81.48",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:02",
            "nlsPrice":"$ 81.665",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:01",
            "nlsPrice":"$ 81.49",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:01",
            "nlsPrice":"$ 81.46",
            "nlsShareVolume":"200"
         },
         {
            "nlsTime":"09:54:01",
            "nlsPrice":"$ 81.46",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:54:00",
            "nlsPrice":"$ 81.49",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:53:10",
            "nlsPrice":"$ 81.54",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:53:05",
            "nlsPrice":"$ 81.46",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:53:05",
            "nlsPrice":"$ 81.46",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:52:57",
            "nlsPrice":"$ 81.525",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:52:55",
            "nlsPrice":"$ 81.53",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:52:46",
            "nlsPrice":"$ 81.41",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:52:28",
            "nlsPrice":"$ 81.31",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:52:28",
            "nlsPrice":"$ 81.32",
            "nlsShareVolume":"156"
         },
         {
            "nlsTime":"09:52:28",
            "nlsPrice":"$ 81.32",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:52:11",
            "nlsPrice":"$ 81.26",
            "nlsShareVolume":"100"
         },
         {
            "nlsTime":"09:51:46",
            "nlsPrice":"$ 81.3585",
            "nlsShareVolume":"100"
         }
      ]
   },
   "message":null,
   "status":{
      "rCode":200,
      "bCodeMessage":null,
      "developerMessage":null
   }
}
#+end_example

- how to access data
#+begin_example
d['data']['rows']
#+end_example


- read 100 rows at two different timepoints
- try to merge

#+begin_export 
>>> c[(c.nlsShareVolume_x != c.nlsShareVolume_y)]
     nlsTime   nlsPrice_x nlsShareVolume_x             request_time_x   nlsPrice_y nlsShareVolume_y             request_time_y
20  15:14:22    $ 1503.74              100 2020-07-16 21:15:13.345747  $ 1503.8799              150 2020-07-16 21:16:22.599059
22  15:14:22  $ 1503.8799              150 2020-07-16 21:15:13.345747    $ 1503.74              100 2020-07-16 21:16:22.599059
24  15:14:22  $ 1503.8799              150 2020-07-16 21:15:13.345747    $ 1503.77              100 2020-07-16 21:16:22.599059
26  15:14:22    $ 1503.77              100 2020-07-16 21:15:13.345747  $ 1503.8799              150 2020-07-16 21:16:22.599059
30  15:14:14  $ 1503.3313              100 2020-07-16 21:15:13.345747  $ 1503.2438              736 2020-07-16 21:16:22.599059
31  15:14:14  $ 1503.3313              100 2020-07-16 21:15:13.345747    $ 1504.05              192 2020-07-16 21:16:22.599059
32  15:14:14  $ 1503.2438              736 2020-07-16 21:15:13.345747  $ 1503.3313              100 2020-07-16 21:16:22.599059
34  15:14:14  $ 1503.2438              736 2020-07-16 21:15:13.345747    $ 1504.05              192 2020-07-16 21:16:22.599059
35  15:14:14    $ 1504.05              192 2020-07-16 21:15:13.345747  $ 1503.3313              100 2020-07-16 21:16:22.599059
36  15:14:14    $ 1504.05              192 2020-07-16 21:15:13.345747  $ 1503.2438              736 2020-07-16 21:16:22.599059
64  15:13:47   $ 1504.655              160 2020-07-16 21:15:13.345747    $ 1505.00              165 2020-07-16 21:16:22.599059
65  15:13:47    $ 1505.00              165 2020-07-16 21:15:13.345747   $ 1504.655              160 2020-07-16 21:16:22.599059

#+end_export

- joining this data is quite difficult
- nlsTime isn't a unique key
#+begin_example
>>> a
             nlsPrice nlsShareVolume               request_time
nlsTime                                                        
15:14:30   $ 1503.985            100 2020-07-16 21:15:13.345747
15:14:29    $ 1503.98            100 2020-07-16 21:15:13.345747
15:14:29    $ 1503.97            100 2020-07-16 21:15:13.345747
#+end_example


- try again
#+begin_example
# most recent response:

>>> b[0:8]
    nlsTime    nlsPrice nlsShareVolume               request_time
0  15:50:38  $ 1492.835            100 2020-07-16 21:51:16.656989
1  15:50:36   $ 1493.60          1,000 2020-07-16 21:51:16.656989
2  15:50:35   $ 1493.55            100 2020-07-16 21:51:16.656989
3  15:50:35   $ 1493.55            100 2020-07-16 21:51:16.656989
4  15:50:35   $ 1492.04            200 2020-07-16 21:51:16.656989
5  15:50:34   $ 1491.45            100 2020-07-16 21:51:16.656989
6  15:50:34   $ 1492.17            100 2020-07-16 21:51:16.656989
7  15:50:33   $ 1491.50            100 2020-07-16 21:51:16.656989   (*)
8  15:50:33   $ 1490.82            300 2020-07-16 21:51:16.656989


# older response:

>>> a
     nlsTime   nlsPrice nlsShareVolume               request_time
0   15:50:33  $ 1491.50            100 2020-07-16 21:51:11.485160
1   15:50:33  $ 1490.82            300 2020-07-16 21:51:11.485160
2   15:50:33  $ 1491.01            196 2020-07-16 21:51:11.485160
3   15:50:33  $ 1490.82            487 2020-07-16 21:51:11.485160
4   15:50:33  $ 1491.06            100 2020-07-16 21:51:11.485160
..       ...        ...            ...                        ...
95  15:49:51  $ 1495.83            100 2020-07-16 21:51:11.485160
96  15:49:51  $ 1495.83            100 2020-07-16 21:51:11.485160
97  15:49:51  $ 1495.83            100 2020-07-16 21:51:11.485160
98  15:49:51  $ 1495.83            100 2020-07-16 21:51:11.485160
99  15:49:49  $ 1495.83            100 2020-07-16 21:51:11.485160

[100 rows x 4 columns]

# row 7 in b is identical to row 0 in a. 

>>> first_identical
    nlsTime   nlsPrice nlsShareVolume               request_time
7  15:50:33  $ 1491.50            100 2020-07-16 21:51:16.656989

# for a complete trade history i will have to merge b[:6] and a

>>> b[:first_identical.index[0]].append(a)[0:12]
    nlsTime    nlsPrice nlsShareVolume               request_time
0  15:50:38  $ 1492.835            100 2020-07-16 21:51:16.656989
1  15:50:36   $ 1493.60          1,000 2020-07-16 21:51:16.656989
2  15:50:35   $ 1493.55            100 2020-07-16 21:51:16.656989
3  15:50:35   $ 1493.55            100 2020-07-16 21:51:16.656989
4  15:50:35   $ 1492.04            200 2020-07-16 21:51:16.656989
5  15:50:34   $ 1491.45            100 2020-07-16 21:51:16.656989
6  15:50:34   $ 1492.17            100 2020-07-16 21:51:16.656989
0  15:50:33   $ 1491.50            100 2020-07-16 21:51:11.485160
1  15:50:33   $ 1490.82            300 2020-07-16 21:51:11.485160
2  15:50:33   $ 1491.01            196 2020-07-16 21:51:11.485160
3  15:50:33   $ 1490.82            487 2020-07-16 21:51:11.485160
4  15:50:33   $ 1491.06            100 2020-07-16 21:51:11.485160


#+end_example


- this is the response outside of opening hours:

#+begin_example
>>> a
     nlsTime  nlsPrice nlsShareVolume               request_time
0   16:00:01  $ 405.39            602 2020-07-16 22:04:06.310595
1   16:00:01  $ 405.39            109 2020-07-16 22:04:06.310595
2   16:00:01  $ 405.39            237 2020-07-16 22:04:06.310595
3   16:00:01  $ 405.39            110 2020-07-16 22:04:06.310595
4   16:00:01  $ 405.39            500 2020-07-16 22:04:06.310595
..       ...       ...            ...                        ...
95  16:00:01  $ 405.39              9 2020-07-16 22:04:06.310595
96  16:00:01  $ 405.39          4,691 2020-07-16 22:04:06.310595
97  16:00:01  $ 405.39             82 2020-07-16 22:04:06.310595
98  16:00:01  $ 405.39             15 2020-07-16 22:04:06.310595
99  16:00:01  $ 405.39             55 2020-07-16 22:04:06.310595

[100 rows x 4 columns]
>>> b
     nlsTime  nlsPrice nlsShareVolume               request_time
0   16:00:01  $ 405.39            602 2020-07-16 22:04:11.493776
1   16:00:01  $ 405.39            109 2020-07-16 22:04:11.493776
2   16:00:01  $ 405.39            237 2020-07-16 22:04:11.493776
3   16:00:01  $ 405.39            110 2020-07-16 22:04:11.493776
4   16:00:01  $ 405.39            500 2020-07-16 22:04:11.493776
..       ...       ...            ...                        ...
95  16:00:01  $ 405.39              9 2020-07-16 22:04:11.493776
96  16:00:01  $ 405.39          4,691 2020-07-16 22:04:11.493776
97  16:00:01  $ 405.39             82 2020-07-16 22:04:11.493776
98  16:00:01  $ 405.39             15 2020-07-16 22:04:11.493776
99  16:00:01  $ 405.39             55 2020-07-16 22:04:11.493776

[100 rows x 4 columns]
>>> first_identical
    nlsTime  nlsPrice nlsShareVolume               request_time
0  16:00:01  $ 405.39            602 2020-07-16 22:04:11.493776

#+end_example


- premarket:

- the api url on github 
https://gist.github.com/ranaroussi/4010b0bd32d7f4712705177f455ab016

#+begin_example
def get_premarket(ticker):
    """ 
    gets premarket prices from nasdaq
    
    usage:
    >> price, volume = get_premarket('spy')
    
    """
    
    url = 'https://api.nasdaq.com/api/quote/%s/extended-trading?assetclass=etf&markettype=pre'
    data = requests.get(url % ticker.upper()).json()['data']
    
    if data['infoTable']['rows']:
        volume = int(data['infoTable']['rows'][0]['volume'].replace(',', ''))
        price = float(data['tradeDetailTable']['rows'][0]['price'].replace('$', '').replace(',', ''))
        return price, volume
    
    # no premarket trading, return last price with 0 volume
    return float(data['previousInfo'].split('$')[1]), 0
#+end_example

- example https://api.nasdaq.com/api/quote/spy/extended-trading?assetclass=etf&markettype=pre

#+begin_example
 
#1
VALID (RFC 8259)
Formatted JSON Data
{
   "data":{
      "previousInfo":"Jul. 15, 2020 Market Close: $321.85",
      "sessionText":"",
      "infoTable":{
         "headers":{
            "volume":"Pre-Market Share Volume",
            "highPrice":"Pre-Market High",
            "lowPrice":"Pre-Market Low"
         },
         "rows":[
            {
               "volume":"1,795,458",
               "highPrice":"$321.85",
               "lowPrice":"$318.92"
            }
         ]
      },
      "tradeDetailTable":{
         "headers":{
            "time":"Pre-Market Time (ET)",
            "price":"Pre-Market Price",
            "shareVolume":"Pre-Market Share Volume"
         },
         "rows":[
            {
               "time":"09:30:00",
               "price":"$319.79",
               "shareVolume":"100"
            },
            {
               "time":"09:30:00",
               "price":"$319.78",
               "shareVolume":"100"
            },
            {
               "time":"09:30:00",
               "price":"$319.79",
               "shareVolume":"100"
#+end_example

- after hours website doesn't seem to load data with api
https://www.nasdaq.com/market-activity/stocks/nvda/after-hours
